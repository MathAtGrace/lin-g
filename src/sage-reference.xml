<?xml version="1.0" encoding="UTF-8"?>

<appendix xml:id="app-sage-reference"
	  xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>
    Sage Reference
  </title>

  <p>
    As we have introduced a number of Sage commands throughout the
    text, it could be helpful to have the most important ones summarized
    in a single place.  That is the aim of this appendix.
  </p>

  <p>
    <dl>
      <li><title> Accessing Sage </title>
      <p> In addition to the Sage cellls included throughout the book,
      there are a number of ways to access Sage. 
      <ol marker="a.">
	<li><p> There is a freely available Sage cell at  
	<url href="https://sagecell.sagemath.org/"
	     visual="sagecell.sagemath.org" />.
	</p></li>
	<li><p> You can save your Sage work by creating an account at
	<url href="https://cocalc.com"
	     visual="cocalc.com"/>
	and working in a Sage worksheet.
	</p></li>
	<li><p> There is a page of Sage cells at
	<url href="http://gvsu.edu/s/0Ng"
	     visual="gvsu.edu/s/0Ng"/>.
	The results obtained from
	evaluating one cell are available in other cells on that page.
	However, you will lose any work once
	the page is reloaded.  
      </p></li>
      </ol>
      </p></li>

      <li><title> Creating matrices </title>
      <p> There are a couple of ways to create matrices.  For
      instance, the matrix
      <me>
	\begin{bmatrix}
	-2 \amp 3 \amp 0 \amp 4 \\
	1 \amp -2 \amp 1 \amp -3 \\
	0 \amp 2 \amp 3 \amp 0 \\
	\end{bmatrix}
      </me>
      can be created in either of the two following ways.
	<ol marker="a.">
	  <li> <p>
	    <cd>
matrix(3, 4, [-2, 3, 0, 4,
               1,-2, 1,-3,
	       0, 2, 3, 0])
	    </cd>
	  </p>
	  </li>
	  <li> <p>
	    <cd>
matrix([ [-2, 3, 0, 4],
         [ 1,-2, 1,-3],
	 [ 0, 2, 3, 0] ])
	    </cd>
	  </p>
	  </li>
	</ol>
      </p>
      <p>
	Be aware that Sage can treat mathematically equivalent
	matrices in different ways depending on how they are entered. 
	For instance, the matrix
	<cd>
matrix([ [1, 2],
         [2, 1] ])
	</cd>
	has integer entries while
	<cd>
matrix([ [1.0, 2.0],
         [2.0, 1.0] ])
	</cd>
	has floating point entries.
      </p>

      <p>
	If you would like the entries to be considered as floating
	point numbers, you can include <c>RDF</c> in the definition
	of the matrix.
	<cd>
matrix(RDF, [ [1, 2],
              [2, 1] ])
	</cd>
      </p>
      </li>

      <li>
	<title> Special matrices </title>
	<p>
	  The <m>4\times 4</m> identity matrix can be created with
	  <cd>
identity_matrix(4)	    
	  </cd>
	  A diagonal matrix can be created from a list of its diagonal entries.  For instance,
	  <cd>
diagonal_matrix([3,-4,2])	    
	  </cd>
	</p>
      </li>
      <li>
	<title>Reduced row echelon form</title>
	<p>
	  The reduced row echelon form of a matrix can be obtained
	  using the <c>rref()</c> function.  For instance,
	  <cd>
A = matrix([ [1,2], [2,1] ])
A.rref()
	  </cd>
	</p>
      </li>

      <li>
	<title>Vectors</title>
	<p>
	  A vector is defined by listing its components.
	  <cd>
v = vector([3,-1,2])
	  </cd>
	</p>
      </li>

      <li>
	<title> Addition </title>
	<p> The <c>+</c> operator performs vector and matrix
	addition.
	<cd>
v = vector([2,1])
w = vector([-3,2])
print(v+w)
	</cd>
	<cd>
A = matrix([[2,-3],[1,2]])
B = matrix([[-4,1],[3,-1]])
print(A+B)
	</cd>
	</p>
      </li>

      <li>
	<title> Multiplication </title>
	<p>
	  The <c>*</c> operator performs scalar multiplication of
	  vectors and matrices.
	  <cd>
v = vector([2,1])
print(3*v)
A = matrix([[2,1],[-3,2]])	    
print(3*A)
	  </cd>
	</p>

	<p>
	  Similarly, the <c>*</c> is used for matrix-vector and
	  matrix-matrix multiplication.
	  <cd>
A = matrix([[2,-3],[1,2]])
v = vector([2,1])	    
print(A*v)
B = matrix([[-4,1],[3,-1]])
print(A*B)
	  </cd>
	</p>
      </li>

      <li>
	<title> Operations on vectors </title>
	<p>
	  The length of a vector <c>v</c> is found using <c>v.norm()</c>.
	</p>
	<p>
	  The dot product of two vectors <c>v</c> and <c>w</c> is
	  <c>v*w</c>.
	</p>
      </li>

      <li>
	<title> Operations on matrices </title>
	<p> The transpose of a matrix <c>A</c> is obtained using either
	<c>A.transpose()</c> or <c>A.T</c>.
	</p>
	<p> The inverse of a matrix <c>A</c> is obtained using either
	<c>A.inverse()</c> or <c>A^-1</c>.
	</p>
	<p> The transpose of a matrix <c>A</c> is obtained using
	either <c>A.T</c> or <c>A.transpose()</c>.</p>
	<p> A basis for the null space <m>\nul(A)</m> is found with
	<c>A.right_kernel()</c>. </p>
      </li>

      <li>
	<title> Eigenvectors and eigenvalues </title>
	<p>
	  The eigenvalues of a matrix <c>A</c> can be found with
	  <cd>
A.eigenvalues()	    
	  </cd>
	  The number of times that an eigenvalue appears in the list
	  equals its multiplicity.
	</p>

	<p>
	  The eigenvectors of a matrix having rational entries can be
	  found with
	  <cd>
A.eigenvectors_right()	    
	  </cd>
	</p>

	<p>
	  If <m>A</m> can be diagonalized as <m>A=PDP^{-1}</m>, then
	  <cd>
D, P = A.right_eigenmatrix()
	  </cd>
	  provides the matrices <c>D</c> and <c>P</c>.
	</p>
	<p>
	  The characteristic polynomial of <c>A</c> is
	  <cd>
A.charpoly('x')
	  </cd>
	  and its factored form
	  <cd>
A.fcp('x')
	  </cd>
	</p>
      </li>
      <li>
	<title> Matrix factorizations </title>
	<p>
	  The <m>LU</m> factorization of a matrix 
	  <cd>
P, L, U = A.LU()	    
	  </cd>
	  gives matrices so that <m>PA = LU</m>.
	</p>

	<p>
	  A singular value decomposition is obtained with
	  <cd>
U, Sigma, V = A.SVD()	    
	  </cd>
	  It's important to note that the matrix must be defined using
	  <c>RDF</c>.  For instance,
	  <c>A = matrix(RDF, 3,2,[1,0,-1,1,1,1])</c>.
	</p>
      </li>
    </dl>
  </p>
      

</appendix>

  
